name: Python CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Check syntax of code
  check-syntax:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 yapf isort

      - name: Run flake8 for syntax checking
        run: |
          flake8 .

      - name: Run yapf for code formatting check
        run: |
          yapf --diff --recursive .

      - name: Run isort for import sorting check
        run: |
          isort --check-only --diff .

  # Job for running all tests
  run-tests:
    runs-on: ubuntu-latest
    needs: check-syntax
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest allure-pytest

      - name: Ensure allure-results directory exists
        run: |
          if [ ! -d "allure-results" ]; then
            echo "Creating allure-results directory..."
            mkdir allure-results
          else
            echo "allure-results directory already exists."
          fi

      - name: Set environment variables
        run: echo "BASE_URL=${{ secrets.BASE_URL }}" >> $GITHUB_ENV

      - name: Run tests and generate Allure report
        run: |
          pytest --disable-warnings -q --alluredir=allure-results

  # Run failed tests only
  run-failed-tests:
    runs-on: ubuntu-latest
    needs: run-tests
    if: failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest allure-pytest

      - name: Ensure allure-results directory exists
        run: |
          if [ ! -d "allure-results" ]; then
            echo "Creating allure-results directory..."
            mkdir allure-results
          else
            echo "allure-results directory already exists."
          fi

      - name: Set environment variables
        run: echo "BASE_URL=${{ secrets.BASE_URL }}" >> $GITHUB_ENV

      - name: Run failed tests
        run: |
          pytest --disable-warnings -q --tb=short --alluredir=allure-results --last-failed

  # Job for generating and deploying Allure report
  create-pages:
    runs-on: ubuntu-latest
    needs: run-failed-tests
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install allure-pytest
          # Встановлення Allure через npm
          sudo apt-get install -y npm
          sudo npm install -g allure-commandline

      - name: Check allure-results directory
        run: |
          echo "Listing files in allure-results directory:"
          ls -al allure-results || echo "Directory allure-results does not exist."
          # Альтернативно, можна використати команду find для кращого пошуку файлів:
          find allure-results -type f || echo "No files found in allure-results directory."

      - name: Generate Allure report
        run: |
          allure generate allure-results --clean -o allure-report

      - name: Deploy Allure report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          publish_dir: ./allure-report
          publish_branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_DEPLOY_TOKEN }}
